Academic-Success-Predictor (Student Performance Predictor)
-----------------------------------------------------------------------------------------------
Session 1:
Agenda
1. Setup the github repository
2. Create a new environment
3. setup.py
4. requirements.txt

steps:
1. Create a new environment in project directory
conda create -p asp-env  python==3.8 -y
asp-env is created

2. Create a setup.py
setup.py will be responsible for creating application as package

3. Create a requirements.txt

4. Created src folder and build package

Things to be noted:
"-e ." is added to requirements.txt to run setup.py, that will build the packages
--------------------------------------------------------------------------------------------------------------------------------
Session 2:

1. Created Exception handling
2. Created logging
3. Created utils

---------------------------------------------------------------------------------------------------------------------------------
Session 3:
1. Project description: Student performance Predictor, In the data there are numerical values, categorical values, nan values.
2. implementing Feature Engineering
3. EDA
4. Model training in jupyter notebook

---------------------------------------------------------------------------------------------------------------------------------
Session 4:
1.Data ingestion

---------------------------------------------------------------------------------------------------------------------------------
Session 5:
1.Data Transformation : Data cleaning, Feature Engineering and transforming data

---------------------------------------------------------------------------------------------------------------------------------
Session : 6
1. Model training and Model evaluation 

---------------------------------------------------------------------------------------------------------------------------------
Session : 7
1. Hyperparameter tuning

---------------------------------------------------------------------------------------------------------------------------------
Session : 8
1. Create Prediction Pipeline Using Flask Web APP

---------------------------------------------------------------------------------------------------------------------------------
Session : 9
1. Deployment in AWS beanstalk using CICD pipelines
Only CD (Continous Delivery) is implemented
Able to access instance with url from mobile and computer.
Maths score prediction working OK.
encountered issues as AWS UI is updated and sloved with
https://www.youtube.com/watch?v=pbUFV27Py8E
https://www.youtube.com/watch?v=2BoVhej0QVI

local-->github-->AWS beanstalk. 
created connection to github from AWS beanstalk thorough AWS codepipeline.

Tested: made small change in local, pushed to github and in codepipeline "Release" button is active,
to deploy the updated code with changes.

Important: At this point, Only predictions are made in AWS, NO MODEL TRAINING is done.
Model is trained on local and deployed on AWS.

--------------------------------------------------------------------------------------------------------------------------------
Session: 10
CICD AWS ECR EC2 Deployment intiated
